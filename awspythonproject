import boto3
import subprocess
client = boto3.client('codecommit')
def create_codesummit_repo(repo_name):
  try:
    response = client.create_repository(
    repositoryName=repo_name,
    repositoryDescription='Migrated repository from local git'
  )
  print(f"Repository'{repo_name}'created successfully.")
return response['repository['reposioryMetadata']['cloneUrlHttp']
except Exception as e:
print(f"Error creating repository:{e}")
return None
def clone_existing_repo(existing_repo_url,local_path],check=True)
print(f"Cloned repository from {existing_repo_url,local_path}")
except subprocess.CalledProcessError as e:
print(f"Error cloning repository:{e}")
def push_to_codecommit(local_path,codecommit_url):
try:
subprocess.run(["git","-c",local_path,"remote","add',"codecommit,codecommit_url],check=True)
subprocess.run(["git","-c',loal_path,"push",'codecommit","--all"],check=True)
print(f"Repository pushed to CodeCommit at {codecommit_url]")
except subprocess.CalledProcessError as e:
print(f"Error pushing repository:{e}")
def 
migrate_git_to_codecommit(existing_repo_url, repo_name,local_path):
codecommit_url=create_codecommit_repo(repo_name)
if not codecommit_url:
return
clone_existing_repo(existing_repo_url,local_path)
push_to_codecommit(local_path,codecommit_url)
if__name__=="__main__":
  existing_repo_url="https://github.com/your_username/your_repo.git"repo_name="YourCodeCommitRepoName"local_path="/path/to/local/repo"
migrate_git_to_codecommit(existing_repo_url,repo_name,local_path)

